.noobForm {
    display: grid;
    grid-gap: 5px;
    padding: 10px;

    /* border: 1px dashed #696969; */
    border: 1px dashed red;
    position: relative;
    top: 30px;

    height: 100%;
    width: 100%;
}

.noobControl {
    border: 1px dashed gray;
    /* needed to position the resizer */
    position: relative;
    overflow: visible;
    /* background-color: lightyellow; */
    /* To prevent the user from highlighting text */
    user-select: none;
}

/* Show gray background to empty controls to make them easier to distinguish from actual controls */ 
.emptyControl {
    background: rgba(100,100,100,0.3);
    height: 100%;
    width: 100%;
    position: absolute;
}

.contentWrapper {
    width: 100%;
    height: 100%;
    opacity: 0.5;
}

.controlPotentialDrop {
    background-color: lightgreen !important;
}

/* For the Resizer */

.resizer {
    position: absolute;
    user-select: auto;
    /* box-sizing: border-box; */
    padding: 0px;
    margin: 3px;
    cursor: move;
    width: 7px;
    height: 7px;
    /* border: 5px solid black; */
    border-right: 2px solid rgba(0,0,0,0.4);
    border-bottom: 2px solid rgba(0,0,0,0.4);
    cursor: se-resize;
    bottom: 0;
    right: 0;
}

.resizingControl {
    /* position: relative; */
}

.resizingContent {
    /* background-color: #aa33cc; */
    /* Set the z-index so that it will bo on top of other control elements it overlaps while resizing */
    /* If we don't set it, it is only on top of the landing pads */
    z-index: 20;
    /* Set to important...maybe because this is a secondary class so we need to add important */
    opacity: 0.8 !important;
    /* set important to override the relative position when not resizing */
    /* if it is relative position, dragging the content bigger will make the container bigger, instead of popping out of the container */
    position: absolute !important; 

    left: 10;
    right: 10;
    top: 10;
    bottom: 10;
    /* Add a border so that when empty controls are resized, there is a visual cue  */
    outline: 1px dashed dimgray;
}

.potentialResizeDrop {
    /* Add important...maybe because this is just secondary class */
    background-color: lightgreen !important;
}

.potentialResizeDrop-invalid {
    background-color: pink !important;
}

/* For the Landing Pad */
/* About the zIndex: by default, the landing pad is behind the content but in front of the noobControl container
    Topmost         Content (upper sibling)                    
                    Landing Pad (bottom sibling) - position-absolute
    Bottom          NoobControl (parent)

   Without changing the z-index, isOver cannot be detected on the landing pad (child), but can be detected on the noobControl (parent)
   - this is because of the Content element which is a sibling of the landing pad. The content is stacked higher than the landing pad
   We add this class temporarily for now.
   - it's OK to always put the z-index regardless if it's moving/resizing because it will only be rendered during moving/resizing
*/

.landingPadContainer {
    display: grid;
    /* background: #bbbb00; */
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
    grid-template-rows: 1fr 1fr;
    grid-gap: 5px;
    padding: 0px;    
    z-index: 10;
}

.landingPadContainer-moving {
    z-index: 10;
}

.landingPadCell {
    /* border: 2px solid red; */
    /* padding: 0px;     */
    background: rgba(100,100,100,0.35);
}

.landingPadPotentialDrop {
    background: lightgreen;
}
